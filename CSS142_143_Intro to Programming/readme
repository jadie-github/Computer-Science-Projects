Huffman Coding (java) (WATCH THE FILE HUFFMANCODE.MP4 FOR BETTER UNDERSTANDING)
Project description: Huffman coding is an algorithm devised by David A. Huffman of MIT in 1952 for compressing data to make a file occupy a smaller amount of space. In this assignment, I create classes HuffmanCode and HuffmanNode to be used in compression of data. A file HuffmanCompressor.java will handle user interaction and calls the huffman code methods to compress and decompress a given file. The users will be able to: pass a text file (.txt) to make a compressed huffman code file (.code), compress that file into (.short), decompress that file into a (.new) file, initialize a huffman code by using an array of different frequencies representing counts of characters in a text, and construct a huffman code by reading a given input (.code) file.

20 Questions (java)
Project Description: 20 Questions is a guessing game in which the objective is to ask yes/no questions to determine an object. In my version, the human begins a round by choosing some object, and the computer attempts to guess that object by asking a series of yes/no questions until it thinks it knows the answer. Then, the computer makes a guess; if its guess is correct, the computer wins, and otherwise the user wins. If the computer loses, it will add the object that the user was thinking of to its knowledge base.

Letter Inventory (java)
Project Description: This project used to keep track of an inventory of letters of the alphabet. The constructor for the class takes a String and computes how many of each letter are in the String. This is the information the object keeps track of (how many a’s, how many b’s, etc). It ignores the case of the letters and ignores anything that is not an alphabetic character (e.g., it ignores punctuation characters, digits and anything else that is not a letter).

Guitar Hero (java)
Project Description: This project mimics a guitar with only 37 pitches. Users can play notes on their keyboards with the notes corresponding to a key mapping input (see string.txt). Users can also choose song samples for the program to read and play out. The song samples need to be in .txt form, and each letter has to correspond to a note in the key mapping.

GuitarHero.java is the main program to play all the notes. GuitarLite.java is a mini version of GuitarHero.java where you can only play 2 notes (pressing A and C on the keyboard). If you want to play a pre-written song, use PlayThatTune.java, and select a .txt file from the "Tunes" folder. To record your playing, use RecordThatTune.java. Have fun riffing!

Playing Assassin (java)
Project Description: This program helps you manage a game of assassin. Each person playing assassin has a particular target that they are trying to assassinate. One of the things that makes the game more interesting to play is that initially each person knows only who they are assassinating (they don't know who is trying to assassinate them nor do they know who other people are trying to assassinate). You are working on a program for the “game administrator” who needs to keep track of who is stalking whom and the history of who killed whom. Happy hunting!

Evil Hangman Game (java)
Project Description: This program mimics a game of hangman. But this won’t be any ordinary game of hangman. Our hangman program is going to cheat. In a normal game of hangman, the computer picks a word that the user is supposed to guess. In our game of hangman, the computer is going to delay picking a word until it is forced to. As a result, at any given point in time there will be a set of words that are currently being used by the computer. Each of those words will have the same pattern to be displayed to the user. This way, the user will lose faster, and definitely won't win most of the time.

Random Grammar Generator (java)
Project Description: this program reads an input file with a grammar in Backus-Naur Form (BNF) and allows the user to randomly generate elements of the grammar.

Anagram Solver (java)
Project Description: This project uses a dictionary to find all combinations of words that have the same letters as a given phrase.
